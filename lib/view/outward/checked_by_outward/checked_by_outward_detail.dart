import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:trailo/controller/outward/outward_list_controller.dart';
import 'package:trailo/model/checked_by_list/get_checked_by_list_response.dart';
import 'package:trailo/utility/app_routes.dart';
import '../../../common/securetextinputformatter.dart';
import '../../../controller/outward/checked_list_controller.dart';
import '../../../utility/app_colors.dart';
import '../../../utility/date_formater.dart';

// Outward class definition

class CheckedByOutwardDetail extends StatefulWidget {
  const CheckedByOutwardDetail({super.key});

  @override
  State<CheckedByOutwardDetail> createState() => _CheckedByOutwardDetailState();
}

class _CheckedByOutwardDetailState extends State<CheckedByOutwardDetail> {
  CheckedByListData? chekcedBy;
  final TextEditingController casesController = TextEditingController();
  final controller = Get.put(CheckedListController());
  String? srNo; // Add variable to store serial number

  @override
  void initState() {
    super.initState();
    final arguments = Get.arguments as Map<String, dynamic>;
    setState(() {
      chekcedBy = arguments['checkedby_detail'] as CheckedByListData;
      srNo = arguments['sr_no'] as String; // Retrieve serial number
    });
  }

  String _verificationLabel(int? status) {
    switch (status) {
      case 0:
        return 'Transfer for Picked';
      case 1:
        return 'Transfer for Checked';
      case 2:
        return 'Transfer for Packaging';
      case 3:
        return 'Transfer for Checked';
      default:
        return 'Unknown';
    }
  }

  Color _verificationColor(int? status) {
    switch (status) {
      case 0:
        return AppColors.secondary;
      case 1:
        return AppColors.success;
      case 2:
        return Colors.deepPurpleAccent;
      default:
        return AppColors.primary;
    }
  }

  String _processType(int status) {
    switch (status) {
      case 0:
        return 'Sales Order';
      case 1:
        return 'Free Issue';
      case 2:
        return 'Sample';
      case 3:
        return 'Transfer';
      default:
        return 'Unknown';
    }
  }

  @override
  Widget build(BuildContext context) {
    if (chekcedBy == null) {
      return Scaffold(
        appBar: AppBar(title: const Text('Checked By Details')),
        body: const Center(child: Text('No data available')),
      );
    }

    return Scaffold(
      appBar: AppBar(title: Text('Checked By Details: ${srNo}')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: ListView(
                children: [
                  _buildDetailRow('Sr. No.', "${srNo}"),
                  _buildDetailRow(
                    'Date',
                    "${DateFormater.formatDate(chekcedBy!.orderDate.toString())}",
                  ),
                  _buildDetailRow('Company Name', chekcedBy!.companyName),
                  _buildDetailRow('Division', chekcedBy!.divisionName),
                  _buildDetailRow(
                    'Process Type',
                    _processType(int.parse(chekcedBy!.processType)),
                  ),
                  _buildDetailRow(
                    'Customer Name',
                    chekcedBy!.customerName.isNotEmpty
                        ? chekcedBy!.customerName
                        : "N/A",
                  ),
                  _buildDetailRow(
                    'Issue Name',
                    chekcedBy != null &&
                            chekcedBy!.salesTeamEmployeeName != null &&
                            chekcedBy!.salesTeamEmployeeName!.isNotEmpty
                        ? chekcedBy!.salesTeamEmployeeName!
                        : 'N/A',
                  ),
                  _buildDetailRow(
                    'Order Date',
                    DateFormater.formatDate(chekcedBy!.orderDate.toString()),
                  ),
                  _buildDetailRow('Status', chekcedBy!.statusName),
                  _buildDetailRow(
                    'Invoice Date',
                    "${DateFormater.formatDate(chekcedBy!.invoiceDateProcess.toString())}",
                  ),
                  _buildDetailRow(
                    'Invoice Number',
                    chekcedBy!.invoiceNumberProcess,
                  ),
                  _buildDetailRow(
                    'Added By',
                    '${chekcedBy!.employeeName.toString()} ${chekcedBy!.salesEmployeeName.toString()}',
                  ),
                  _buildDetailRow(
                    'Invoice Generated By',
                    '${chekcedBy!.employeeName.toString()}${chekcedBy!.salesEmployeeName.toString()}',
                  ),
                  _viewButton('Order Copy', () {
                    try {
                      if (chekcedBy == null || chekcedBy!.orderCopy == null) {
                        print('Error: chekcedBy or lrCopy is null');
                        // Optionally show a snackbar or dialog to user
                        // Get.snackbar('Error', 'No document available to view');
                        return;
                      }

                      final filePath = chekcedBy!.orderCopy
                          .toString()
                          .toLowerCase();
                      final url =
                          '${controller.url.value}${chekcedBy!.orderCopy}';

                      //  print('Attempting to open: $url'); // Debug log

                      if (filePath.endsWith('.pdf')) {
                        print('Navigating to PDF viewer');
                        Get.toNamed(AppRoutes.viewpdf, arguments: url);
                      } else if (filePath.endsWith('.jpg') ||
                          filePath.endsWith('.png') ||
                          filePath.endsWith('.jpeg')) {
                        print('Navigating to Image viewer');
                        Get.toNamed(AppRoutes.viewImage, arguments: url);
                      } else {
                        // print('Unsupported file type: $filePath');
                        //   Get.snackbar('Error', 'File not available on server');
                      }
                    } catch (e) {
                      print('Error in viewButton: $e');
                      // Get.snackbar('Error', 'Failed to open document');
                    }
                  }),
                  _viewButton('Invoice Copy', () {
                    try {
                      if (chekcedBy == null ||
                          chekcedBy!.invoiceCopyNew == null) {
                        print('Error: chekcedBy or lrCopy is null');
                        // Optionally show a snackbar or dialog to user
                        // Get.snackbar('Error', 'No document available to view');
                        return;
                      }

                      final filePath = chekcedBy!.invoiceCopyNew
                          .toString()
                          .toLowerCase();
                      final url =
                          '${controller.url.value}${chekcedBy!.invoiceCopyNew}';

                      print('Attempting to open: $url'); // Debug log

                      if (filePath.endsWith('.pdf')) {
                        print('Navigating to PDF viewer');
                        Get.toNamed(AppRoutes.viewpdf, arguments: url);
                      } else if (filePath.endsWith('.jpg') ||
                          filePath.endsWith('.png') ||
                          filePath.endsWith('.jpeg')) {
                        print('Navigating to Image viewer');
                        Get.toNamed(AppRoutes.viewImage, arguments: url);
                      } else {
                        print('Unsupported file type: $filePath');
                        //    Get.snackbar('Error', 'File not available on server');
                      }
                    } catch (e) {
                      print('Error in viewButton: $e');
                      //  Get.snackbar('Error', 'Failed to open document');
                    }
                  }),
                  _verificationButton(
                    'Verification',
                    _verificationLabel(
                      int.tryParse(
                        chekcedBy!.verificationStatus?.toString() ?? '',
                      ),
                    ),
                    _verificationColor(
                      int.tryParse(
                        chekcedBy!.verificationStatus?.toString() ?? '',
                      ),
                    ),
                    () {
                      showVerificationDialog(
                        context,
                        chekcedBy!.id.toString(),
                        chekcedBy!.invoiceNumberProcess.toString(),
                      );
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void showVerificationDialog(BuildContext context, String id, String invNo) {
    final Map<String, int> transferOptions = {'Picked By': 0, 'Packed By': 2};
    final controller = Get.put(CheckedListController());
    final setPickedController = Get.put(OutwardListController());
    String? selectedTransfer = transferOptions.keys.first;
    int? selectedValue = transferOptions[selectedTransfer];
    final TextEditingController reasonController = TextEditingController();
    final TextEditingController casesController = TextEditingController();
    final TextEditingController weightController = TextEditingController();
    final TextEditingController invoiceController = TextEditingController(
      text: invNo,
    );
    final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8.0),
              ),
              title: const Text('Verification Details'),
              content: SingleChildScrollView(
                child: Form(
                  key: _formKey,
                  child: SizedBox(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        TextFormField(
                          controller: invoiceController,
                          readOnly: true,
                          decoration: const InputDecoration(
                            labelText: 'Invoice No.',
                            hintText: 'Invoice No.',
                          ),
                          enabled: false,
                        ),
                        const SizedBox(height: 16),
                        DropdownButtonFormField<String>(
                          decoration: InputDecoration(
                            label: RichText(
                              text: TextSpan(
                                text: 'Verification Status ',
                                style: TextStyle(color: Colors.black),
                                children: [
                                  TextSpan(
                                    text: '*',
                                    style: TextStyle(color: Colors.red),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          value: selectedTransfer,
                          items: transferOptions.keys.map((String value) {
                            return DropdownMenuItem<String>(
                              value: value,
                              child: Text(value),
                            );
                          }).toList(),
                          onChanged: (String? newValue) {
                            setState(() {
                              selectedTransfer = newValue;
                              selectedValue = transferOptions[newValue!];
                            });
                            print("Verification Status ${selectedValue}");
                          },
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Please select a verification status';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 10),
                        SizedBox(
                          child: selectedValue == 0
                              ? TextFormField(
                                  controller: reasonController,
                                  inputFormatters: [
                                    SecureTextInputFormatter.deny(),
                                  ],
                                  decoration: InputDecoration(
                                    label: RichText(
                                      text: TextSpan(
                                        text: 'Reason ',
                                        style: TextStyle(color: Colors.black),
                                        children: [
                                          TextSpan(
                                            text: '*',
                                            style: TextStyle(color: Colors.red),
                                          ),
                                        ],
                                      ),
                                    ),

                                    hintText: 'Enter Reason',
                                  ),
                                  validator: (value) {
                                    if (value == null || value.isEmpty) {
                                      return 'Please enter a reason';
                                    }
                                    return null;
                                  },
                                )
                              : Column(
                                  children: [
                                    TextFormField(
                                      controller: casesController,
                                      keyboardType: TextInputType
                                          .number, // Restrict keyboard to numbers
                                      inputFormatters: [
                                        SecureTextInputFormatter.deny(),
                                        FilteringTextInputFormatter
                                            .digitsOnly, // Allow only digits
                                      ],
                                      decoration: InputDecoration(
                                        label: RichText(
                                          text: TextSpan(
                                            text: 'No of Cases ',
                                            style: TextStyle(
                                              color: Colors.black,
                                            ),
                                            children: [
                                              TextSpan(
                                                text: '*',
                                                style: TextStyle(
                                                  color: Colors.red,
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),

                                        hintText: 'Enter No of Cases',
                                      ),
                                      validator: (value) {
                                        if (value == null || value.isEmpty) {
                                          return 'Please enter number of cases';
                                        }
                                        final number = int.tryParse(value);
                                        if (number == null) {
                                          return 'Please enter a valid number';
                                        }
                                        if (number <= 0) {
                                          return 'Number of cases must be greater than 0';
                                        }
                                        return null;
                                      },
                                    ),
                                    const SizedBox(height: 10),
                                    TextFormField(
                                      controller: weightController,
                                      keyboardType:
                                          TextInputType.numberWithOptions(
                                            decimal: true,
                                          ), // Allow decimals
                                      inputFormatters: [
                                        SecureTextInputFormatter.deny(),
                                        FilteringTextInputFormatter.allow(
                                          RegExp(r'^\d*\.?\d{0,2}$'),
                                        ), // Allow numbers with up to 2 decimal places
                                      ],
                                      decoration: InputDecoration(
                                        label: RichText(
                                          text: TextSpan(
                                            text: 'Weight ',
                                            style: TextStyle(
                                              color: Colors.black,
                                            ),
                                            children: [
                                              TextSpan(
                                                text: '*',
                                                style: TextStyle(
                                                  color: Colors.red,
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),

                                        hintText: 'Enter Weight',
                                      ),
                                      validator: (value) {
                                        if (value == null || value.isEmpty) {
                                          return 'Please enter a weight';
                                        }
                                        final number = double.tryParse(value);
                                        if (number == null) {
                                          return 'Please enter a valid weight';
                                        }
                                        if (number <= 0) {
                                          return 'Weight must be greater than 0';
                                        }
                                        return null;
                                      },
                                    ),
                                  ],
                                ),
                        ),
                        const SizedBox(height: 20),
                      ],
                    ),
                  ),
                ),
              ),
              actions: [
                ElevatedButton(
                  child: const Text('Submit'),
                  onPressed: () async {
                    if (_formKey.currentState!.validate()) {
                      if (selectedValue == 0) {
                        print("Set Picked");
                        setPickedController.setPicked(
                          id: id,
                          context: context,
                          reason: reasonController.text.toString(),
                        );
                        Navigator.pop(context);
                      } else {
                        print("Set Packed");
                        controller.setPacked(
                          id: id,
                          vstatus: selectedValue,
                          cases: casesController.text.toString(),
                          invNo: invNo,
                          weight: weightController.text.toString(),
                          context: context,
                          reason: reasonController.text.toString(),
                        );

                        Navigator.pop(context);
                      }
                    }
                  },
                ),
              ],
            );
          },
        );
      },
    );
  }

  Widget _verificationButton(
    String label,
    String buttonLabel,
    Color color,
    VoidCallback press,
  ) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(
              width: 150,
              child: Text(
                label,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                  fontSize: 13,
                ),
              ),
            ),
            Expanded(
              child: Row(
                children: [
                  const Text(": ", style: TextStyle(fontSize: 15)),
                  Expanded(
                    child: GestureDetector(
                      onTap: press,
                      child: AnimatedContainer(
                        duration: const Duration(milliseconds: 200),
                        transform: Matrix4.identity()..scale(1.0),
                        child: Material(
                          color: Colors.transparent,
                          child: InkWell(
                            borderRadius: BorderRadius.circular(8),
                            onTap: press,
                            splashColor: Colors.white.withOpacity(0.3),
                            child: Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 12,
                                vertical: 8,
                              ),
                              decoration: BoxDecoration(
                                color: color,
                                borderRadius: BorderRadius.circular(8),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.1),
                                    blurRadius: 4,
                                    offset: const Offset(0, 2),
                                  ),
                                ],
                              ),
                              child: Text(
                                buttonLabel,
                                style: GoogleFonts.poppins(
                                  color: Colors.white,
                                  fontWeight: FontWeight.w500,
                                  fontSize: 14,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Card _viewButton(String label, VoidCallback press) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(
              width: 150,
              child: Text(
                label,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                  fontSize: 13,
                ),
              ),
            ),
            Expanded(
              child: Row(
                children: [
                  const Text(": ", style: TextStyle(fontSize: 15)),
                  GestureDetector(
                    onTap: press,
                    child: AnimatedContainer(
                      duration: const Duration(milliseconds: 200),
                      transform: Matrix4.identity()..scale(1.0),
                      child: Material(
                        color: Colors.transparent,
                        child: InkWell(
                          borderRadius: BorderRadius.circular(8),
                          onTap: press,
                          splashColor: Colors.white.withOpacity(0.3),
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 8,
                            ),
                            decoration: BoxDecoration(
                              color: AppColors.primary,
                              borderRadius: BorderRadius.circular(8),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black.withOpacity(0.1),
                                  blurRadius: 4,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                            ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Text(
                                  "View",
                                  style: GoogleFonts.poppins(
                                    color: Colors.white,
                                    fontWeight: FontWeight.w500,
                                    fontSize: 14,
                                  ),
                                  semanticsLabel: "View Button",
                                ),
                                const SizedBox(width: 6),
                                const Icon(
                                  Icons.remove_red_eye,
                                  color: Colors.white,
                                  size: 18,
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(
              width: 150,
              child: Text(
                label,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                  fontSize: 13,
                ),
              ),
            ),
            const Text(': ', style: TextStyle(fontSize: 15)),
            Expanded(
              child: Text(
                value,
                style: const TextStyle(fontSize: 15),
                maxLines: 3, // Allow up to 3 lines for long text
                overflow: TextOverflow
                    .ellipsis, // Add ellipsis if text exceeds maxLines
                softWrap: true, // Enable text wrapping
              ),
            ),
          ],
        ),
      ),
    );
  }
}
