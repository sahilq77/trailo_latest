import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:google_fonts/google_fonts.dart';

import 'package:trailo/model/picked_by_list/get_picked_by_list_response.dart';
import 'package:trailo/utility/app_routes.dart';

import '../../../controller/outward/picked_by_list_controller.dart';
import '../../../utility/app_colors.dart';
import '../../../utility/date_formater.dart';

class PickedByOutwardDetail extends StatefulWidget {
  const PickedByOutwardDetail({super.key});

  @override
  State<PickedByOutwardDetail> createState() => _PickedByOutwardDetailState();
}

class _PickedByOutwardDetailState extends State<PickedByOutwardDetail> {
  PickedByListData? pickedBy;
  final controller = Get.put(PickedByListController());
  String? srNo; // Add variable to store serial number

  @override
  void initState() {
    super.initState();
    final arguments = Get.arguments as Map<String, dynamic>;
    setState(() {
      pickedBy = arguments['picked_by_detail'] as PickedByListData;
      srNo = arguments['sr_no'] as String; // Retrieve serial number
    });
    controller.fetchPickedByDetail(context: context, id: pickedBy!.id);
  }

  String _verificationLabel(int? status) {
    switch (status) {
      case 0:
        return 'Transfer for Picked';
      case 1:
        return 'Transfer for Checked';
      case 2:
        return 'Transfer for Packaging';
      case 3:
        return 'Transfer for Checked';
      default:
        return 'Unknown';
    }
  }

  Color _verificationColor(int? status) {
    switch (status) {
      case 0:
        return AppColors.secondary;
      case 1:
        return AppColors.success;
      case 2:
        return Colors.deepPurpleAccent;
      default:
        return AppColors.primary;
    }
  }

  String _processType(int status) {
    switch (status) {
      case 0:
        return 'Sales Order';
      case 1:
        return 'Free Issue';
      case 2:
        return 'Sample';
      case 3:
        return 'Transfer';
      default:
        return 'Unknown';
    }
  }

  @override
  Widget build(BuildContext context) {
    if (pickedBy == null) {
      return Scaffold(
        appBar: AppBar(title: const Text('Picked By Details')),
        body: const Center(child: Text('No data available')),
      );
    }

    return Scaffold(
      appBar: AppBar(title: Text('Picked By Details: ${srNo}')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: ListView(
                children: [
                  _buildDetailRow('Sr. No.', "${srNo}"),
                  _buildDetailRow(
                    'Date',
                    "${DateFormater.formatDate(pickedBy!.orderDate.toString())}",
                  ),
                  _buildDetailRow('Company Name', pickedBy!.companyName),
                  _buildDetailRow('Division', pickedBy!.divisionName),
                  _buildDetailRow(
                    'Process Type',
                    _processType(int.parse(pickedBy!.processType)),
                  ),
                  _buildDetailRow(
                    'Customer Name',
                    pickedBy!.customerName.isNotEmpty
                        ? pickedBy!.customerName
                        : "N/A",
                  ),
                  _buildDetailRow(
                    'Issue Name',
                    pickedBy != null &&
                            pickedBy!.salesTeamEmployeeName != null &&
                            pickedBy!.salesTeamEmployeeName!.isNotEmpty
                        ? pickedBy!.salesTeamEmployeeName!
                        : 'N/A',
                  ),
                  _buildDetailRow(
                    'Order Date',
                    DateFormater.formatDate(pickedBy!.orderDate.toString()),
                  ),
                  _buildDetailRow('Status', pickedBy!.statusName),
                  _buildDetailRow(
                    'Invoice Date',
                    "${DateFormater.formatDate(pickedBy!.invoiceDateProcess.toString())}",
                  ),
                  _buildDetailRow(
                    'Invoice Number',
                    pickedBy!.invoiceNumberProcess,
                  ),
                  _buildDetailRow(
                    'Added By',
                    '${pickedBy!.employeeName.toString()} ${pickedBy!.salesEmployeeName.toString()}',
                  ),
                  _buildDetailRow(
                    'Invoice Generated By',
                    '${pickedBy!.employeeName.toString()}${pickedBy!.salesEmployeeName.toString()}',
                  ),
                  _viewButton('Order Copy', () {
                    try {
                      if (pickedBy == null || pickedBy!.orderCopy == null) {
                        print('Error: pickedBy or lrCopy is null');
                        // Optionally show a snackbar or dialog to user
                        //  Get.snackbar('Error', 'No document available to view');
                        return;
                      }

                      final filePath = pickedBy!.orderCopy
                          .toString()
                          .toLowerCase();
                      final url =
                          '${controller.url.value}${pickedBy!.orderCopy}';

                      print('Attempting to open: $url'); // Debug log

                      if (filePath.endsWith('.pdf')) {
                        print('Navigating to PDF viewer');
                        Get.toNamed(AppRoutes.viewpdf, arguments: url);
                      } else if (filePath.endsWith('.jpg') ||
                          filePath.endsWith('.png') ||
                          filePath.endsWith('.jpeg')) {
                        print('Navigating to Image viewer');
                        Get.toNamed(AppRoutes.viewImage, arguments: url);
                      } else {
                        print('Unsupported file type: $filePath');
                        //Get.snackbar('Error', 'File not available on server');
                      }
                    } catch (e) {
                      print('Error in viewButton: $e');
                      // Get.snackbar('Error', 'Failed to open document');
                    }
                  }),
                  _viewButton('Invoice Copy', () {
                    try {
                      if (pickedBy == null ||
                          pickedBy!.invoiceCopyNew == null) {
                        print('Error: pickedBy or lrCopy is null');
                        // Optionally show a snackbar or dialog to user
                        // Get.snackbar('Error', 'No document available to view');
                        return;
                      }

                      final filePath = pickedBy!.invoiceCopyNew
                          .toString()
                          .toLowerCase();
                      final url =
                          '${controller.url.value}${pickedBy!.invoiceCopyNew}';

                      print('Attempting to open: $url'); // Debug log

                      if (filePath.endsWith('.pdf')) {
                        print('Navigating to PDF viewer');
                        Get.toNamed(AppRoutes.viewpdf, arguments: url);
                      } else if (filePath.endsWith('.jpg') ||
                          filePath.endsWith('.png') ||
                          filePath.endsWith('.jpeg')) {
                        print('Navigating to Image viewer');
                        Get.toNamed(AppRoutes.viewImage, arguments: url);
                      } else {
                        print('Unsupported file type: $filePath');
                        // Get.snackbar('Error', 'File not available on server');
                      }
                    } catch (e) {
                      print('Error in viewButton: $e');
                      // Get.snackbar('Error', 'Failed to open document');
                    }
                  }),
                  _verificationButton(
                    'Verification',
                    _verificationLabel(
                      int.tryParse(
                        pickedBy!.verificationStatus?.toString() ?? '',
                      ),
                    ),
                    _verificationColor(
                      int.tryParse(
                        pickedBy!.verificationStatus?.toString() ?? '',
                      ),
                    ),
                    () {
                      _showVerificationDialog(context, () {
                        controller.setChecked(
                          id: pickedBy!.id,
                          context: context,
                        );
                      });
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showVerificationDialog(BuildContext context, VoidCallback onConfirm) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Confirm Verification'),
          content: const Text(
            'Are you sure you want to proceed with transfer to checked ?',
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                onConfirm();
                Navigator.of(context).pop();
              },
              child: const Text('Confirm'),
            ),
          ],
        );
      },
    );
  }

  Widget _verificationButton(
    String label,
    String buttonLabel,
    Color color,
    VoidCallback press,
  ) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(
              width: 150,
              child: Text(
                label,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                  fontSize: 13,
                ),
              ),
            ),
            Expanded(
              child: Row(
                children: [
                  const Text(": ", style: TextStyle(fontSize: 15)),
                  GestureDetector(
                    onTap: press,
                    child: AnimatedContainer(
                      duration: const Duration(milliseconds: 200),
                      transform: Matrix4.identity()..scale(1.0),
                      child: Material(
                        color: Colors.transparent,
                        child: InkWell(
                          borderRadius: BorderRadius.circular(8),
                          onTap: press,
                          splashColor: Colors.white.withOpacity(0.3),
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 8,
                            ),
                            decoration: BoxDecoration(
                              color: color,
                              borderRadius: BorderRadius.circular(8),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black.withOpacity(0.1),
                                  blurRadius: 4,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                            ),
                            child: Text(
                              buttonLabel,
                              style: GoogleFonts.poppins(
                                color: Colors.white,
                                fontWeight: FontWeight.w500,
                                fontSize: 14,
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Card _viewButton(String label, VoidCallback press) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(
              width: 150,
              child: Text(
                label,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                  fontSize: 13,
                ),
              ),
            ),
            Expanded(
              child: Row(
                children: [
                  const Text(": ", style: TextStyle(fontSize: 15)),
                  GestureDetector(
                    onTap: press,
                    child: AnimatedContainer(
                      duration: const Duration(milliseconds: 200),
                      transform: Matrix4.identity()..scale(1.0),
                      child: Material(
                        color: Colors.transparent,
                        child: InkWell(
                          borderRadius: BorderRadius.circular(8),
                          onTap: press,
                          splashColor: Colors.white.withOpacity(0.3),
                          child: Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 8,
                            ),
                            decoration: BoxDecoration(
                              color: AppColors.primary,
                              borderRadius: BorderRadius.circular(8),
                              boxShadow: [
                                BoxShadow(
                                  color: Colors.black.withOpacity(0.1),
                                  blurRadius: 4,
                                  offset: const Offset(0, 2),
                                ),
                              ],
                            ),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Text(
                                  "View",
                                  style: GoogleFonts.poppins(
                                    color: Colors.white,
                                    fontWeight: FontWeight.w500,
                                    fontSize: 14,
                                  ),
                                  semanticsLabel: "View Button",
                                ),
                                const SizedBox(width: 6),
                                const Icon(
                                  Icons.remove_red_eye,
                                  color: Colors.white,
                                  size: 18,
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            SizedBox(
              width: 150,
              child: Text(
                label,
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                  fontSize: 13,
                ),
              ),
            ),
            const Text(': ', style: TextStyle(fontSize: 15)),
            Expanded(
              child: Text(
                value,
                style: const TextStyle(fontSize: 15),
                maxLines: 3, // Allow up to 3 lines for long text
                overflow: TextOverflow
                    .ellipsis, // Add ellipsis if text exceeds maxLines
                softWrap: true, // Enable text wrapping
              ),
            ),
          ],
        ),
      ),
    );
  }
}
